#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2019 OpenWrt.org
#
# service cloudreve enable
# service cloudreve restart
#
# ubus call service list '{"name": "cloudreve"}'
# ubus call service list '{"name": "cloudreve", "verbose": true}'
#
# ubus call service event '{"type": "config.change", "data":{"package": "cloudreve"}}'
#
. ${IPKG_INSTROOT}/lib/functions/snail.sh
export PATH='/app/cloudreve:/usr/sbin:/usr/bin:/sbin:/bin'


START=95
USE_PROCD=1
#PROCD_DEBUG=1

PKG_NAME=cloudreve
PKG_DESC=Cloudreve
PKG_PROG=/app/cloudreve/cloudreve.sh

LOGFILE=/var/log/${PKG_NAME}.log
PIDFILE=/var/run/${PKG_NAME}.pid

WORKDIR=/app/cloudreve
CFGFILE=${WORKDIR}/conf.ini
DBSFILE=${WORKDIR}/cloudreve.db
SAVEDIR=${WORKDIR}/uploads


#
# Function validate_uci_config
#
validate_uci_config()
{
	uci_validate_section $PKG_NAME $PKG_NAME "${1:-main}" \
		'enabled:bool:0' \
		'internet:bool:0' \
	\
		'user:string:nobody' \
		'bind:ip4addr:0.0.0.0' \
		'port:port:8052' \
		'tls:bool:0' \
	;
}


#
# Function start_instance
#
start_instance()
{
	local section="$1"
	validate_uci_config $section || {
		_logger "Validate uci config error."; return 1;
	}
	[ $enabled -eq 0 ] && return 2;


	[ -d "${SAVEDIR}" ] || mkdir -p $SAVEDIR

	export PROCD_UID=${user:-nobody}
	if [ -n "${PROCD_UID}" ]; then
		chown -R $PROCD_UID /app/cloudreve
		chown -R $PROCD_UID /app/cloudreve/uploads
		touch $CFGFILE && chmod 0666 $CFGFILE
		touch $LOGFILE && chmod 0666 $LOGFILE
	fi


	# procd
	procd_open_instance main
	procd_set_param command ${PKG_PROG:-$PKG_NAME}

	procd_set_param user $PROCD_UID
	procd_set_param pidfile $PIDFILE

	procd_set_param env PATH=$PATH HOME=$WORKDIR PWD=$WORKDIR
	procd_set_param file /etc/config/$PKG_NAME
	procd_append_param file $CFGFILE
	procd_append_param file $DBSFILE

	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_close_instance
}


#
# Function that start the daemon/service
#
start_service()
{
	_logger "Starting ${PKG_NAME} ..."

	config_load $PKG_NAME
	config_foreach start_instance $PKG_NAME
	if [ -f /etc/firewall.d/${PKG_NAME}.sh ]; then
		 sh /etc/firewall.d/${PKG_NAME}.sh on >/dev/null
	fi

	_logger "Starting ${PKG_NAME} finished."
	return $?
}


#
# Function that stop the daemon/service
#
stop_service()
{
	_logger "Stopping ${PKG_NAME} ..."
	if [ -f /etc/firewall.d/${PKG_NAME}.sh ]; then
		 sh /etc/firewall.d/${PKG_NAME}.sh off >/dev/null
	fi

	_logger "Stopping ${PKG_NAME} finished."
	return $?
}


#
# Function service triggers
#
service_triggers()
{
	procd_add_reload_trigger $PKG_NAME
	procd_add_validation validate_uci_config
}

